server {
    root /src/html;

    location / {
        # try to serve file directly, fallback to index.php
        try_files $uri /index.php$is_args$args;
    }

    location ~ ^/index\.php(/|$) {
        fastcgi_pass remebrance-s3-media-app-dev:9000;
        fastcgi_split_path_info ^(.+\.php)(/.*)$;
        include fastcgi_params;

        # optionally set the value of the environment variables used in the application
        # fastcgi_param APP_ENV prod;
        # fastcgi_param APP_SECRET <app-secret-id>;
        # fastcgi_param DATABASE_URL "mysql://db_user:db_pass@host:3306/db_name";

        # When you are using symlinks to link the document root to the
        # current version of your application, you should pass the real
        # application path instead of the path to the symlink to PHP
        # FPM.
        # Otherwise, PHP's OPcache may not properly detect changes to
        # your PHP files (see https://github.com/zendtech/ZendOptimizerPlus/issues/126
        # for more information).
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        fastcgi_param DOCUMENT_ROOT $realpath_root;
        # Prevents URIs that include the front controller. This will 404:
        # http://domain.tld/index.php/some-path
        # Remove the internal directive to allow URIs like this
        internal;
    }

    # return 404 for all other php files not matching the front controller
    # this prevents access to other php files you don't want to be accessible.
    location ~ \.php$ {
        return 404;
    }

    error_log /var/log/nginx/project_error.log;
    access_log /var/log/nginx/project_access.log;
    
    
    
    # Here we try the new proxy thing for s3
    
    location ~ ^/stream_from_s3/(.*?)/(.*?)/(.*) {
        # Only allow internal redirects
        internal;
        
        # How to resove remote URLs, you may want to update this depending
        # on your setup, in our case itâ€™s inside a Docker container with
        # dnsmasq running.
        resolver 127.0.0.11 ipv6=off;
        
        # Extract the remote URL parts
        set $download_protocol $1;
        set $download_host $2;
        set $download_path $3;
        
        # Reconstruct the remote URL
        set $download_url $download_protocol://$download_host/$download_path;
        
        # Headers for the remote server, unset Authorization and Cookie for security reasons.
        proxy_set_header Host $download_host;
        proxy_set_header Authorization '';
        proxy_set_header Cookie '';
        
        # Headers for the response, by using $upstream_http_... here we can inject
        # other headers from Django, proxy_hide_header ensures the header from the
        # remote server isn't passed through.
        #proxy_hide_header Content-Disposition;
        #add_header Content-Disposition $upstream_http_content_disposition;
        
        # Stops the local disk from being written to (just forwards data through)
        proxy_max_temp_file_size 0;
        
        # Proxy the remote file through to the client
        proxy_pass $download_url$is_args$args;
        proxy_intercept_errors on;
        error_page 301 302 307 = @handle_redirect;        
        
    }    
    
    
    location @handle_redirect {
        resolver 127.0.0.11 ipv6=off;
        set $saved_redirect_location '$upstream_http_location';
        proxy_pass $saved_redirect_location;
    }    
    
}